//
// Created by Luwei Yang on 5/27/15.
// Revised by Sway on 5/29/2015
//

#ifndef RECONSTRUCTOR_POLYNORMIALS_H
#define RECONSTRUCTOR_POLYNORMIALS_H

// PolynormialItem is a mathematical util for
// BSpin
// TODO(luwei): Add comparison method, Debug this class

template <int Degree>
class PolynormialItem {

public:

    //default constructor
    PolynormialItem(void);

    //copy constructor
    template <int Degree2>
     PolynormialItem(const PolynormialItem<Degree2>&P);

    // assignment constructor
    template <int Degree2>
    PolynormialItem& operator=(const  PolynormialItem<Degree2>&P);

    // Compute the function value: f(x)
    double  operator()(double x) const;

    // Compute interal of the polynomial --return value is also the polynomial form
    PolynormialItem<Degree +1> integral(void) const;

    // Compute the derivative of polynormial --return value is also the polynomial form
    PolynormialItem<Degree-1> derivative(void) const;

    // Compute the integral value start from x = min to x = max
    double integral(double min, double max);

    //scale a polynomial
    PolynormialItem scale(const double &s) const;

    //shift a polynomial
    PolynormialItem shift(const double &t) const;

    template<int Degree2>
    PolynormialItem <Degree + Degree2> operator * (const PolynormialItem<Degree2> & p)const;

    PolynormialItem& operator -= (const double s);
    PolynormialItem operator -(const double s) const;
    PolynormialItem& operator += (const double s);
    PolynormialItem operator +(const double s) const;
    PolynormialItem& operator *= (const double s);
    PolynormialItem operator *(const double s) const;
    PolynormialItem& operator /= (const double s);
    PolynormialItem operator /(const double s) const;

    // print information of the polynomialItem
    void printnl(void) const;


#endif
private:
    // The coefficient
    double coefficients[Degree+1];
};


template<int Degree>
class StartingPolynormialItem {
public:

    // multiplication of two starting polynormials
    template<int Degree2>
            StartingPolynormialItem<Degree + Degree2> operator *(const StartingPolynormialItem<Degree2> &sp)const;

    // scale of a starting polynormial
    StartingPolynormialItem scale(const double &s) const;

    //shift of apolynormial
    StartingPolynormialItem shift(const double &t) const;

    // judgement
    int operator < (const StartingPolynormialItem &sp) const;

    // used for ordering
    static int Compare(const void *v1, const void *v2);

public:
    double start;
    PolynormialItem<Degree> p;
};

#include "PolynomialItem.hpp"
#endif //RECONSTRUCTOR_POLYNORMIALS_H

